{"version":3,"sources":["webpack://MelodyCollider/./src/game.js","webpack://MelodyCollider/./src/game_view.js","webpack://MelodyCollider/./src/moving_object.js","webpack://MelodyCollider/./src/orb.js","webpack://MelodyCollider/./src/player.js","webpack://MelodyCollider/./src/utils.js","webpack://MelodyCollider/webpack/bootstrap","webpack://MelodyCollider/./src/app.js"],"names":[],"mappings":";;;;;;;;;;;AAAA,YAAY,mBAAO,CAAC,2BAAO;AAC3B,eAAe,mBAAO,CAAC,iCAAU;;AAEjC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA,sB;;;;;;;;;;;;AChDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,2BAA2B,4BAA4B;AACvD,6BAA6B,8BAA8B;AAC3D,6BAA6B,8BAA8B;AAC3D,8BAA8B,+BAA+B;AAC7D,gCAAgC,4BAA4B;AAC5D,gCAAgC,4BAA4B;AAC5D;;AAEA,0B;;;;;;;;;;;;ACxBA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,8B;;;;;;;;;;;;ACpBA,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,aAAa,mBAAO,CAAC,+BAAS;;AAE9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA,qB;;;;;;;;;;;;;AC3BA,qBAAqB,mBAAO,CAAC,+CAAiB;AAC9C,aAAa,mBAAO,CAAC,+BAAS;;AAE9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wB;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA,sB;;;;;;UChBA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACrBA,aAAa,mBAAO,CAAC,6BAAQ;AAC7B,iBAAiB,mBAAO,CAAC,uCAAa;;AAEtC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,CAAC,E","file":"main.js","sourcesContent":["const Orb = require(\"./orb\");\nconst Player = require(\"./player\");\n\nconst DIM_X = 700;\nconst DIM_Y = 500;\nconst NUM_ORBS = 3;\n\nfunction Game() {\n    // call addOrbs()\n    this.orbs = this.addOrbs();\n    this.player = new Player(this.randomPosition());\n}\n\nGame.prototype.addOrbs = function () {\n    // NUM_ORBS times: new orb\n    let orbs = [];\n    for (let i = 0; i < NUM_ORBS; i++) {\n        orbs.push(new Orb(this.randomPosition()));\n    }\n    return orbs;\n};\n\nGame.prototype.allObjects = function () {\n    return [this.player].concat(this.orbs);\n}\n\nGame.prototype.randomPosition = function () {\n    let randPosX = Math.floor(Math.random() * DIM_X);\n    let randPosY = Math.floor(Math.random() * DIM_Y);\n    return [randPosX, randPosY];\n}\n\nGame.prototype.draw = function (ctx) {\n    // clearRect(ctx)\n    // NUM_ORBS times: orb[i].draw(ctx)\n    ctx.clearRect(0, 0, DIM_X, DIM_Y);\n    this.allObjects().forEach(function (object) {\n        object.draw(ctx);\n    });\n}\n\nGame.prototype.moveObjects = function () {\n    // NUM_ORBS times: orb[i].move(ctx)\n    this.allObjects().forEach(function (object) {\n        object.move();\n    })\n};\n\nmodule.exports = Game;","function GameView(game, ctx) {\n    this.game = game;\n    this.ctx = ctx;\n}\n\nGameView.prototype.start = function () {\n    window.setInterval(this.handleGame.bind(this), 20);\n    this.bindKeyHandlers(this.game);\n};\n\nGameView.prototype.handleGame = function (e) {\n    this.game.moveObjects();\n    this.game.draw(this.ctx);\n};\n\nGameView.prototype.bindKeyHandlers = function (game) {\n    key('up', function () {game.player.direction('up')});\n    key('down', function () {game.player.direction('down')});\n    key('left', function () {game.player.direction('left')});\n    key('right', function () {game.player.direction('right')});\n    //key('enter', function () {alert('you pressed enter!')});\n    //key('space', function () {alert('you pressed space!')});\n}\n\nmodule.exports = GameView;","function MovingObject(object) {\n    this.pos = object.pos;\n    this.vel = object.vel;\n    this.radius = object.radius;\n    this.color = object.color;\n};\n\nMovingObject.prototype.draw = function (ctx) {\n    // draw a circle\n    ctx.beginPath();\n    ctx.arc(this.pos[0], this.pos[1], this.radius, 0, 2*Math.PI);\n    ctx.closePath();\n    // circle has no border\n    ctx.strokeStyle = 'transparent';\n    // fill circle with MovingObject color property\n    ctx.fillStyle = this.color;\n    ctx.fill();\n    ctx.stroke();\n};\n\nmodule.exports = MovingObject;","const MovingObject = require(\"./moving_object\");\nconst Util = require(\"./utils\");\n\nconst DEFAULTS = {\n    COLOR: \"red\",\n    RADIUS: 15,\n    SPEED: 3\n};\n\nfunction Orb(pos) {\n    let properties = {\n        pos: pos,\n        vel: Util.randomVec(DEFAULTS.SPEED),\n        radius: DEFAULTS.RADIUS,\n        color: DEFAULTS.COLOR\n    };\n\n    MovingObject.call(this, properties);\n}\n\nUtil.inherits(Orb, MovingObject);\n\nOrb.prototype.move = function () {\n    this.pos = [this.pos[0] + this.vel[0],\n                this.pos[1] + this.vel[1]];\n}\n\nmodule.exports = Orb;","const MovingObject = require(\"./moving_object\");\nconst Util = require(\"./utils\");\n\nconst DEFAULT = {\n    COLOR: \"gray\",\n    RADIUS: 15,\n    SPEED: 3\n};\n\nfunction Player(pos) {\n    let properties = {\n        pos: pos,\n        vel: [0, 0],\n        radius: DEFAULT.RADIUS,\n        color: DEFAULT.COLOR\n    }\n    MovingObject.call(this, properties);\n}\n\nUtil.inherits(Player, MovingObject);\n\nPlayer.prototype.move = function () {\n    this.pos = [this.pos[0] + this.vel[0],\n                this.pos[1] + this.vel[1]];\n}\n\nPlayer.prototype.direction = function (key) {\n    switch (key) {\n        case 'up':\n            this.vel = [0,-DEFAULT.SPEED];\n            break;\n        case 'down':\n            this.vel = [0,DEFAULT.SPEED];\n            break;\n        case 'left':\n            this.vel = [-DEFAULT.SPEED,0];\n            break;\n        case 'right':\n            this.vel = [DEFAULT.SPEED,0];\n            break;\n    }\n}\n\nmodule.exports = Player;","const Util = {\n    inherits(childClass, parentClass) {\n        function Surrogate() {};\n        Surrogate.prototype = parentClass.prototype;\n        childClass.prototype = new Surrogate();\n        childClass.prototype.constructor = childClass;\n    },\n    randomVec(length) {\n        const deg = 2 * Math.PI * Math.random();\n        return (Util.scale([Math.sin(deg), Math.cos(deg)], length));\n    },\n    scale(vec, mag) {\n        return [Math.round(vec[0] * mag), Math.round(vec[1] * mag)];\n    }\n};\n\nmodule.exports = Util;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const Game = require(\"./game\");\nconst GameView = require(\"./game_view\");\n\ndocument.addEventListener(\"DOMContentLoaded\", function () {\n    const canvas = document.getElementById(\"game-canvas\");\n    const ctx = canvas.getContext('2d');\n\n    const game = new Game();\n\n    // continuously draw moving Orbs in Game\n    const gameView = new GameView(game, ctx);\n    gameView.start();\n});"],"sourceRoot":""}